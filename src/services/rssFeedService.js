// src/services/rssFeedService.js - Version 100% Claude
import { claudeAnalysisService } from "./claudeAnalysisService";
import { dataService } from "./dataService";

// Configuration RSS (identique)
const RSS2JSON_API_URL = "https://api.rss2json.com/v1/api.json";
const RSS2JSON_API_KEY = "88vzmfaog9tacnzokqfjydvju8tbf95dn3iavrpj";

const SCHNEIDER_RSS_FEEDS = [
  "https://www.se.com/fr/fr/about-us/newsroom/news/rss.xml",
  "https://www.se.com/ww/en/about-us/newsroom/news/rss.xml",
  "https://blog.se.com/feed/",
  "https://www.challenges.fr/rss.xml",
  "https://www.usinenouvelle.com/rss/",
  "https://www.01net.com/rss/",
  "https://www.zdnet.fr/feeds/rss/actualites/",
  "https://www.enerzine.com/feed",
  "https://www.maddyness.com/feed/",
];

const SCHNEIDER_KEYWORDS = [
  "schneider", "schneider electric", "jean-pascal tricoire", "peter herweck",
  "olivier blum", "efficacit√© √©nerg√©tique", "gestion √©nerg√©tique", "energy management",
  "automation", "automatisation industrielle", "industrial automation", "centre de donn√©es",
  "data center", "smart grid", "smart building", "b√¢timent intelligent", "iot industriel", "iiot",
];

/**
 * R√©cup√®re les actualit√©s d'un flux RSS
 */
async function fetchRssFeed(rssUrl) {
  try {
    console.log(`R√©cup√©ration du flux: ${rssUrl}`);
    const apiUrl = `${RSS2JSON_API_URL}?rss_url=${encodeURIComponent(rssUrl)}${
      RSS2JSON_API_KEY ? `&api_key=${RSS2JSON_API_KEY}` : ""
    }`;

    const response = await fetch(apiUrl);
    if (!response.ok) {
      throw new Error(`Erreur HTTP: ${response.statusText}`);
    }

    const data = await response.json();
    if (data.status !== "ok") {
      throw new Error(`Erreur API: ${data.message || "Erreur inconnue"}`);
    }

    console.log(`${data.items?.length || 0} articles r√©cup√©r√©s de ${rssUrl}`);
    return data.items || [];
  } catch (error) {
    console.error(`Erreur flux RSS ${rssUrl}:`, error);
    return [];
  }
}

/**
 * Normalise un article RSS
 */
function normalizeNewsItem(item, source) {
  try {
    const pubDate = new Date(item.pubDate);
    const day = pubDate.getDate().toString().padStart(2, "0");
    const months = ["Janv.", "F√©vr.", "Mars", "Avr.", "Mai", "Juin", 
                   "Juil.", "Ao√ªt", "Sept.", "Oct.", "Nov.", "D√©c."];
    const month = months[pubDate.getMonth()];
    const year = pubDate.getFullYear();
    const formattedDate = `${day} ${month} ${year}`;

    let categories = item.categories || [];
    if (typeof categories === "string") {
      categories = categories.split(",").map(cat => cat.trim());
    }

    let cleanDescription = "";
    if (item.description) {
      cleanDescription = item.description.replace(/<[^>]*>?/gm, "");
    }

    return {
      title: item.title || "Sans titre",
      date: formattedDate,
      category: categories.join(", ") || "Actualit√©",
      description: cleanDescription,
      link: item.link || "",
      source: source,
      pubDateTimestamp: pubDate.getTime(),
    };
  } catch (error) {
    console.error("Erreur normalisation:", error);
    return {
      title: item?.title || "Article sans titre",
      date: new Date().toLocaleDateString(),
      category: "Actualit√©",
      description: "Description non disponible",
      link: item?.link || "",
      source: source,
      pubDateTimestamp: Date.now(),
    };
  }
}

/**
 * V√©rifie si une actualit√© concerne Schneider Electric
 * MAINTENANT UTILISE CLAUDE au lieu de mots-cl√©s
 */
async function isRelevantToSchneiderWithClaude(newsItem) {
  // Si c'est une source officielle Schneider, c'est pertinent
  if (newsItem.source.includes("se.com") || newsItem.source.includes("blog.se.com")) {
    return true;
  }

  // Pour les autres sources, demander √† Claude
  try {
    const prompt = `
Tu es un expert en analyse de contenu. D√©termine si cette actualit√© concerne Schneider Electric.

ACTUALIT√â:
Titre: ${newsItem.title}
Description: ${newsItem.description}
Cat√©gorie: ${newsItem.category}
Source: ${newsItem.source}

CRIT√àRES:
- Mentionne explicitement Schneider Electric ou ses dirigeants
- Parle de domaines d'activit√© de Schneider Electric (√©nergie, automatisation, etc.)
- √âvoque des partenariats, acquisitions, ou projets impliquant Schneider Electric

R√©ponds uniquement par "OUI" ou "NON" suivi d'une br√®ve justification.

Format: 
PERTINENCE: [OUI/NON]
JUSTIFICATION: [explication courte]
`;

    const response = await claudeAnalysisService._callClaudeAPI(prompt);
    const isRelevant = response.includes("PERTINENCE: OUI");
    
    if (isRelevant) {
      console.log(`‚úì Article pertinent identifi√© par Claude: ${newsItem.title}`);
    }
    
    return isRelevant;
  } catch (error) {
    console.error("Erreur analyse pertinence Claude:", error);
    // Fallback sur mots-cl√©s en cas d'erreur
    const content = `${newsItem.title} ${newsItem.description} ${newsItem.category}`.toLowerCase();
    return SCHNEIDER_KEYWORDS.some(keyword => content.includes(keyword.toLowerCase()));
  }
}

/**
 * R√©cup√®re toutes les actualit√©s avec analyse Claude compl√®te
 */
async function getAllNews() {
  try {
    console.log("üöÄ D√©but r√©cup√©ration des flux RSS avec analyse Claude");

    // 1. R√©cup√©ration des flux RSS
    const newsPromises = SCHNEIDER_RSS_FEEDS.map(feed =>
      fetchRssFeed(feed).then(items => {
        if (!items || !Array.isArray(items)) return [];
        return items.map(item => normalizeNewsItem(item, feed));
      })
    );

    const newsArrays = await Promise.all(newsPromises);
    let allNews = newsArrays.flat();
    console.log(`üì∞ ${allNews.length} articles r√©cup√©r√©s au total`);

    // 2. Filtrage intelligent avec Claude
    console.log("ü§ñ Filtrage intelligent avec Claude...");
    const relevantNews = [];
    
    for (const newsItem of allNews) {
      const isRelevant = await isRelevantToSchneiderWithClaude(newsItem);
      if (isRelevant) {
        relevantNews.push(newsItem);
      }
      // Petite pause pour ne pas surcharger l'API
      await new Promise(resolve => setTimeout(resolve, 500));
    }

    console.log(`‚úÖ ${relevantNews.length} articles pertinents identifi√©s par Claude`);

    // 3. √âlimination des doublons
    const uniqueNews = [];
    const titles = new Set();
    relevantNews.forEach(item => {
      if (!titles.has(item.title)) {
        titles.add(item.title);
        uniqueNews.push(item);
      }
    });

    console.log(`üîÑ ${uniqueNews.length} articles uniques apr√®s d√©duplication`);

    // 4. Tri par date
    const sortedNews = uniqueNews.sort((a, b) => b.pubDateTimestamp - a.pubDateTimestamp);
    
    // 5. Analyse compl√®te avec Claude
    console.log("üß† Analyse compl√®te avec Claude...");
    const bpOffers = dataService.getData().bpOffers;
    const analyzedNews = await analyzeNewsWithClaude(sortedNews, bpOffers);
    
    console.log(`‚ú® ${analyzedNews.filter(item => item.analyzed).length} articles analys√©s par Claude`);
    
    return analyzedNews;
  } catch (error) {
    console.error("‚ùå Erreur lors de la r√©cup√©ration des actualit√©s:", error);
    return [];
  }
}

/**
 * Analyse les actualit√©s avec Claude (remplace l'analyse par mots-cl√©s)
 */
async function analyzeNewsWithClaude(news, bpOffers) {
  try {
    console.log(`üß† Analyse Claude de ${news.length} actualit√©s`);
    
    // Limiter le nombre d'articles √† analyser pour √©viter les co√ªts √©lev√©s
    const articlesToAnalyze = news.slice(0, 15);
    const enrichedNews = [];
    
    for (const newsItem of articlesToAnalyze) {
      try {
        console.log(`üîç Analyse de: ${newsItem.title}`);
        
        // Analyse compl√®te de l'article
        const analysis = await claudeAnalysisService.analyzeArticleCompletely(newsItem, bpOffers);
        
        // Enrichir l'actualit√© avec l'analyse
        const enrichedItem = {
          ...newsItem,
          ...analysis,
          analyzed: true
        };
        
        enrichedNews.push(enrichedItem);
        
        // Pause entre les analyses
        await new Promise(resolve => setTimeout(resolve, 1500));
      } catch (error) {
        console.error(`‚ùå Erreur analyse de ${newsItem.title}:`, error);
        // Ajouter l'article sans analyse en cas d'erreur
        enrichedNews.push({
          ...newsItem,
          analyzed: false,
          contacts: [],
          insights: {}
        });
      }
    }
    
    // Ajouter les articles non analys√©s
    const remainingNews = news.slice(15).map(item => ({
      ...item,
      analyzed: false,
      contacts: [],
      insights: {}
    }));
    
    const finalNews = [...enrichedNews, ...remainingNews];
    
    console.log(`‚úÖ Analyse termin√©e: ${enrichedNews.length} articles analys√©s par Claude`);
    
    return finalNews;
  } catch (error) {
    console.error("‚ùå Erreur lors de l'analyse Claude:", error);
    return news.map(item => ({
      ...item,
      analyzed: false,
      contacts: [],
      insights: {}
    }));
  }
}

/**
 * Analyse la pertinence des actualit√©s par rapport aux offres (100% Claude)
 */
async function analyzeNewsRelevance(news, offers) {
  try {
    console.log(`üéØ Analyse de pertinence Claude pour ${news.length} actualit√©s`);
    
    // Utiliser le service Claude pour l'analyse de pertinence
    const relevanceMatrix = await claudeAnalysisService.analyzeNewsRelevance(news, offers);
    
    console.log(`üìä Matrice de pertinence g√©n√©r√©e: ${relevanceMatrix.length} entr√©es`);
    
    return relevanceMatrix;
  } catch (error) {
    console.error("‚ùå Erreur lors de l'analyse de pertinence:", error);
    return [];
  }
}

/**
 * Extraction de contacts via Claude (remplace l'extraction par regex)
 */
async function extractContactsFromNews(news) {
  try {
    console.log(`üë• Extraction de contacts Claude pour ${news.length} actualit√©s`);
    
    // Utiliser le service Claude pour l'extraction
    const contacts = await claudeAnalysisService.extractContactsFromNews(news);
    
    console.log(`üìá ${contacts.length} contacts extraits par Claude`);
    
    return contacts;
  } catch (error) {
    console.error("‚ùå Erreur lors de l'extraction de contacts:", error);
    return [];
  }
}

// Exporter le service avec les nouvelles m√©thodes Claude
export const rssFeedService = {
  getAllNews,
  analyzeNewsRelevance,
  extractContactsFromNews,
  analyzeNewsWithClaude,
  fetchRssFeed,
  // Nouvelles m√©thodes Claude
  isRelevantToSchneiderWithClaude
};
